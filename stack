#include <stdlib.h>
#include <string.h>
#include <stdio.h>

#define MAXSTACK 300

int top=0;
char **stack;


int stacksize = MAXSTACK;
int stackused = 0;

/* MORE EFFICIENT than holding top constant and copying contents around, see other push() below */
push(v)
char *v;
{
	if(stacksize == stackused) insert();
	stack[top++] = v;
	stackused++;
}

insert()

{
	char **t;
	int j = 0;
	stacksize *= 2;
	t = malloc(sizeof(char*)*stacksize);
	for(j; j <= stacksize/2; j++)
	{
		t[j] = stack[j];
	}	
	free(stack);
	stack = t;
}


char *pop() {
	char *s;

	if (! top) return((char *) 0);
	return(stack[--top]);
}



/*
char *pop() {
	char *v;
	int i;
	v = stack[0];
	for (i=0; i<MAXSTACK-1; i++)	
		stack[i] = stack[i+1];
	return(v);
}

push(v)
char *v;
{
	int i;
	for (i=MAXSTACK-1; i; i--)	//or number of items instead of '99' 
		stack[i] = stack[i-1];
	stack[0] = v;
}

*/

/* DESTRUCTIVE stack print */
show() {
	char *s;

	while(s = pop())
		printf("%s\n", s);
}


main (argc, argv, envp)
int argc;
char **argv, **envp;
{
	int i;
	stack = malloc(300*sizeof(char*));
	push("aaa");
	push("bbb");
	push("ccc");
	for (i=0; i<2000; i++) push("zzz");



	show();
}
